window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "threatxmanager", "modulename": "threatxmanager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.base_module", "modulename": "threatxmanager.base_module", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.base_module.base_module", "modulename": "threatxmanager.base_module.base_module", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule", "kind": "class", "doc": "<p>Abstract base class for modules that use dependency injection for configuration,\nlogging, and database management.</p>\n\n<p>This class provides common functionalities for initializing and managing the essential\ncomponents of a module. Derived classes must implement the <code>run</code> method to execute\nmodule-specific logic.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>config</strong> (Config):\nInstance of the configuration manager.</li>\n<li><strong>log_manager</strong> (LogManager):\nInstance of the log manager.</li>\n<li><strong>logger</strong> (Any):\nLogger specific to the module, used for logging messages and events.</li>\n<li><strong>info</strong> (Dict[str, Any]):\nDictionary containing metadata and dynamic information about the module.</li>\n<li><strong>module_config</strong> (Dict[str, Any]):\nDictionary with the module-specific configuration loaded from the 'modules' section\nof the configuration file.</li>\n<li><strong>db_manager</strong> (DBManager):\nInstance of the database manager.</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.__init__", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.__init__", "kind": "function", "doc": "<p>Initializes the base module with dependency injection for configuration, logging,\nand database management. If not provided, default singleton instances will be used.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_instance</strong> (Optional[Config], optional):\nInstance of the configuration manager. If None, a new instance of <code>Config</code> is created.</li>\n<li><strong>log_manager_instance</strong> (Optional[LogManager], optional):\nInstance of the log manager. If None, a new instance of <code>LogManager</code> is created using\nthe configuration and environment.</li>\n<li><strong>db_instance</strong> (Optional[DBManager], optional):\nInstance of the database manager. If None, a new instance of <code>DBManager</code> is created\nand initialized.</li>\n<li><strong>env</strong> (Optional[str], optional):\nEnvironment identifier. If None, the default environment defined in the configuration is used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_instance</span><span class=\"p\">:</span> <span class=\"n\">threatxmanager</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">manager_config</span><span class=\"o\">.</span><span class=\"n\">Config</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_manager_instance</span><span class=\"p\">:</span> <span class=\"n\">threatxmanager</span><span class=\"o\">.</span><span class=\"n\">logmanager</span><span class=\"o\">.</span><span class=\"n\">logmanager</span><span class=\"o\">.</span><span class=\"n\">LogManager</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">db_instance</span><span class=\"p\">:</span> <span class=\"n\">threatxmanager</span><span class=\"o\">.</span><span class=\"n\">dbmanager</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">DBManager</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.config", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threatxmanager.config.manager_config.Config"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.log_manager", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.log_manager", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threatxmanager.logmanager.logmanager.LogManager"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.logger", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.info", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.info", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.module_config", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.module_config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.update_info", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.update_info", "kind": "function", "doc": "<p>Updates the module metadata with the provided dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>info</strong> (Dict[str, Any]):\nDictionary containing metadata to update for the module.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, Any]</strong>: The updated module metadata dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.load_module_config", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.load_module_config", "kind": "function", "doc": "<p>Loads and validates the module configuration from the global configuration's 'modules'\nsection. The module's class name is used as the key. Warnings are logged if the configuration\nis missing or if expected fields are empty.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, Any]</strong>: A copy of the module-specific configuration dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.get_safe_module_config", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.get_safe_module_config", "kind": "function", "doc": "<p>Returns an obfuscated copy of the module configuration for logging purposes,\npreventing exposure of sensitive data.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, Any]</strong>: The module configuration with sensitive data obfuscated.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.get_base", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.get_base", "kind": "function", "doc": "<p>Returns the ORM declarative base used for database operations.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: The declarative base class (usually named 'Base') used to define ORM models.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.run", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.run", "kind": "function", "doc": "<p>Abstract method that must be implemented by derived classes to execute\nmodule-specific logic.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError</strong>: If the method is not implemented in the derived class.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.base_module.base_module.BaseModule.set_parameter", "modulename": "threatxmanager.base_module.base_module", "qualname": "BaseModule.set_parameter", "kind": "function", "doc": "<p>Sets or updates a parameter in the module's configuration.\nIf the key already exists in the loaded configuration, its value is updated;\notherwise, the key is added.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong> (str):\nThe key of the configuration parameter.</li>\n<li><strong>value</strong> (str):\nThe new value for the parameter.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli", "modulename": "threatxmanager.cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.cli.DatabaseConfigError", "modulename": "threatxmanager.cli", "qualname": "DatabaseConfigError", "kind": "class", "doc": "<p>Custom exception for database configuration errors.</p>\n", "bases": "builtins.Exception"}, {"fullname": "threatxmanager.cli.get_version", "modulename": "threatxmanager.cli", "qualname": "get_version", "kind": "function", "doc": "<p>Reads the project version from the pyproject.toml file under the [project] section.\nAssumes the file is located at the project root (two levels up from this file).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.THREATMANAGER_VERSION", "modulename": "threatxmanager.cli", "qualname": "THREATMANAGER_VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Unknown&#x27;"}, {"fullname": "threatxmanager.cli.STARTUP_MESSAGES", "modulename": "threatxmanager.cli", "qualname": "STARTUP_MESSAGES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;Initializing ThreatXManager... Ready to secure your world!&#x27;, &#x27;Loading modules... All systems operational.&#x27;, &#x27;ThreatXManager booting up. Modules loaded and ready.&#x27;, &#x27;System check complete. ThreatXManager is online.&#x27;, &#x27;Welcome to ThreatXManager. Your security, our priority!&#x27;]"}, {"fullname": "threatxmanager.cli.ThreatXCLI", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.cli.ThreatXCLI.__init__", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_instance</span><span class=\"p\">:</span> <span class=\"n\">threatxmanager</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">manager_config</span><span class=\"o\">.</span><span class=\"n\">Config</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "threatxmanager.cli.ThreatXCLI.config", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.cli.ThreatXCLI.console", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.console", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.cli.ThreatXCLI.modules", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.modules", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "threatxmanager.cli.ThreatXCLI.current_module", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.current_module", "kind": "variable", "doc": "<p></p>\n", "annotation": ": object | None"}, {"fullname": "threatxmanager.cli.ThreatXCLI.current_module_name", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.current_module_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "threatxmanager.cli.ThreatXCLI.base_completer_dict", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.base_completer_dict", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]"}, {"fullname": "threatxmanager.cli.ThreatXCLI.session", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.cli.ThreatXCLI.prompt", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.prompt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.cli.ThreatXCLI.print_startup_info", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.print_startup_info", "kind": "function", "doc": "<p>Print a random startup message and display the count of available modules.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.get_rprompt", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.get_rprompt", "kind": "function", "doc": "<p>Returns a dynamic right prompt string showing the connected database (by name),\nthe SQLAlchemy connector (dialect), pool parameters, and the ThreatManager version.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.update_prompt", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.update_prompt", "kind": "function", "doc": "<p>Update the CLI prompt to include the selected module name, if any.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.update_completer", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.update_completer", "kind": "function", "doc": "<p>Dynamically update the 'set' command autocompletion keys based on current module configuration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.print_help", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.print_help", "kind": "function", "doc": "<p>Display detailed help information for all available commands.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.list_modules", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.list_modules", "kind": "function", "doc": "<p>Display all available modules in a formatted table with clear row separators.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.complete_use", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.complete_use", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">begidx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">endidx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.use_module", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.use_module", "kind": "function", "doc": "<p>Select a module using its name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.complete_show", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.complete_show", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">begidx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">endidx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.show_info", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.show_info", "kind": "function", "doc": "<p>Display the metadata (info) for the selected module in a structured, pretty-printed format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.show_config", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.show_config", "kind": "function", "doc": "<p>Display the module's dynamic configuration in a structured, pretty-printed format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.complete_set", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.complete_set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">begidx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">endidx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.set_param", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.set_param", "kind": "function", "doc": "<p>Update a configuration parameter for the current module.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.run_module", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.run_module", "kind": "function", "doc": "<p>Execute the currently selected module.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.cli.ThreatXCLI.run", "modulename": "threatxmanager.cli", "qualname": "ThreatXCLI.run", "kind": "function", "doc": "<p>Main interactive CLI loop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.config", "modulename": "threatxmanager.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.config.manager_config", "modulename": "threatxmanager.config.manager_config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.config.manager_config.logger", "modulename": "threatxmanager.config.manager_config", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger threatxmanager.config.manager_config (INFO)&gt;"}, {"fullname": "threatxmanager.config.manager_config.Config", "modulename": "threatxmanager.config.manager_config", "qualname": "Config", "kind": "class", "doc": "<p>Singleton for centralized configuration management.</p>\n\n<p>This class loads, accesses, updates, and obfuscates sensitive information\ncontained in a configuration file.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>config_file</strong> (Path):\nThe absolute path to the configuration file.</li>\n<li><strong>config</strong> (Dict[str, Any]):\nDictionary containing the loaded configuration.</li>\n<li><strong>_instance</strong> (Optional[Config]):\nThe singleton instance of the Config class.</li>\n<li><strong>_initialized</strong> (bool):\nFlag indicating whether the configuration has been initialized.</li>\n</ul>\n"}, {"fullname": "threatxmanager.config.manager_config.Config.__init__", "modulename": "threatxmanager.config.manager_config", "qualname": "Config.__init__", "kind": "function", "doc": "<p>Initializes the Config singleton by loading the configuration from a TOML file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_file</strong> (Optional[str], optional):\nThe path to the configuration file. If None, 'config.toml' in the same\ndirectory is used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "threatxmanager.config.manager_config.Config.config_file", "modulename": "threatxmanager.config.manager_config", "qualname": "Config.config_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "threatxmanager.config.manager_config.Config.config", "modulename": "threatxmanager.config.manager_config", "qualname": "Config.config", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "threatxmanager.config.manager_config.Config.get", "modulename": "threatxmanager.config.manager_config", "qualname": "Config.get", "kind": "function", "doc": "<p>Retrieves the value associated with a key in the root of the configuration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong> (str):\nThe key to look up in the configuration.</li>\n<li><strong>default</strong> (Any, optional):\nThe default value to return if the key is not found.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Any</strong>: The value associated with the key, or the default if the key is absent.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.config.manager_config.Config.get_default_env", "modulename": "threatxmanager.config.manager_config", "qualname": "Config.get_default_env", "kind": "function", "doc": "<p>Returns the default environment defined in the configuration (key 'default_env').</p>\n\n<p>If not defined, 'dev' is returned.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The default environment.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.config.manager_config.Config.get_section", "modulename": "threatxmanager.config.manager_config", "qualname": "Config.get_section", "kind": "function", "doc": "<p>Retrieves the configuration for a specific section and environment.</p>\n\n<p>If the 'environment' parameter is not provided, the default environment is used.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>section</strong> (str):\nThe configuration section to retrieve.</li>\n<li><strong>environment</strong> (Optional[str], optional):\nThe specific environment to retrieve the section for. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, Any]</strong>: The configuration dictionary for the specified section and environment.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">section</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.config.manager_config.Config.set", "modulename": "threatxmanager.config.manager_config", "qualname": "Config.set", "kind": "function", "doc": "<p>Sets or updates the value of a key in the configuration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key</strong> (str):\nThe key in the configuration.</li>\n<li><strong>value</strong> (Any):\nThe value to set for the key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.config.manager_config.Config.reload", "modulename": "threatxmanager.config.manager_config", "qualname": "Config.reload", "kind": "function", "doc": "<p>Reloads the configuration from the file.</p>\n\n<p>This method is useful when dynamic updates are made to the configuration file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.config.manager_config.Config.obfuscate_config", "modulename": "threatxmanager.config.manager_config", "qualname": "Config.obfuscate_config", "kind": "function", "doc": "<p>Returns a copy of the configuration with sensitive key values obfuscated.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config</strong> (Optional[Dict[str, Any]], optional):\nThe configuration dictionary to obfuscate. If None, uses self.config.</li>\n<li><strong>sensitive_keys</strong> (Optional[Set[str]], optional):\nA set of sensitive keys whose values should be masked.\nDefaults to {\"DATABASE_URL\", \"SENTRY_DSN\", \"TOKEN\", \"PASSWORD\"}.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Dict[str, Any]</strong>: The configuration dictionary with sensitive data obfuscated.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sensitive_keys</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.dbmanager", "modulename": "threatxmanager.dbmanager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.connection", "modulename": "threatxmanager.dbmanager.connection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.connection.DBManagerError", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManagerError", "kind": "class", "doc": "<p>Custom exception class for DBManager errors.</p>\n", "bases": "builtins.Exception"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager", "kind": "class", "doc": "<p>Singleton for centralized database management using SQLAlchemy.</p>\n\n<p>This class handles the creation and configuration of the database engine,\nsession management, and provides basic CRUD operations.</p>\n"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.__init__", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_instance</span><span class=\"p\">:</span> <span class=\"n\">threatxmanager</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">manager_config</span><span class=\"o\">.</span><span class=\"n\">Config</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.config", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.database_url", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.database_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.pool_size", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.pool_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.max_overflow", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.max_overflow", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.pool_timeout", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.pool_timeout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.echo", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.echo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.Session", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.Session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.get_engine", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.get_engine", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Engine</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.init_db", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.init_db", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">base</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.get_session", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.get_session", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.create", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.create", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.read", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">_id</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.update", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.dbmanager.connection.DBManager.delete", "modulename": "threatxmanager.dbmanager.connection", "qualname": "DBManager.delete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.dbmanager.models", "modulename": "threatxmanager.dbmanager.models", "kind": "module", "doc": "<p>This module provides the base model for SQLAlchemy ORM models.</p>\n\n<p>It defines a declarative base and an abstract BaseModel class that includes\ncommon attributes and functionality shared across all models.</p>\n"}, {"fullname": "threatxmanager.dbmanager.models.Base", "modulename": "threatxmanager.dbmanager.models", "qualname": "Base", "kind": "class", "doc": "<p>The base class of the class hierarchy.</p>\n\n<p>When called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.</p>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "threatxmanager.dbmanager.models.Base.__init__", "modulename": "threatxmanager.dbmanager.models", "qualname": "Base.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "threatxmanager.dbmanager.models.Base.registry", "modulename": "threatxmanager.dbmanager.models", "qualname": "Base.registry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.orm.decl_api.registry", "default_value": "&lt;sqlalchemy.orm.decl_api.registry object&gt;"}, {"fullname": "threatxmanager.dbmanager.models.Base.metadata", "modulename": "threatxmanager.dbmanager.models", "qualname": "Base.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.sql.schema.MetaData", "default_value": "MetaData()"}, {"fullname": "threatxmanager.dbmanager.models.BaseModel", "modulename": "threatxmanager.dbmanager.models", "qualname": "BaseModel", "kind": "class", "doc": "<p>Abstract base model for all ORM models.</p>\n\n<p>This abstract class defines common attributes for all models, such as a primary key\n(<code>id</code>), creation timestamp (<code>created_at</code>), and update timestamp (<code>updated_at</code>). It also\ndynamically sets the table name to the lowercase name of the class.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>id</strong> (int):\nPrimary key of the record, automatically incremented.</li>\n<li><strong>created_at</strong> (datetime.datetime):\nTimestamp indicating when the record was created. Defaults to the current UTC time.</li>\n<li><strong>updated_at</strong> (datetime.datetime):\nTimestamp indicating when the record was last updated. Automatically updated on modifications.</li>\n</ul>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "threatxmanager.dbmanager.models.BaseModel.id", "modulename": "threatxmanager.dbmanager.models", "qualname": "BaseModel.id", "kind": "variable", "doc": "<p></p>\n", "default_value": "Column(None, Integer(), table=None, primary_key=True, nullable=False)"}, {"fullname": "threatxmanager.dbmanager.models.BaseModel.created_at", "modulename": "threatxmanager.dbmanager.models", "qualname": "BaseModel.created_at", "kind": "variable", "doc": "<p></p>\n", "default_value": "Column(None, DateTime(), table=None, nullable=False, default=CallableColumnDefault(&lt;function datetime.utcnow&gt;))"}, {"fullname": "threatxmanager.dbmanager.models.BaseModel.updated_at", "modulename": "threatxmanager.dbmanager.models", "qualname": "BaseModel.updated_at", "kind": "variable", "doc": "<p></p>\n", "default_value": "Column(None, DateTime(), table=None, nullable=False, onupdate=CallableColumnDefault(&lt;function datetime.utcnow&gt;), default=CallableColumnDefault(&lt;function datetime.utcnow&gt;))"}, {"fullname": "threatxmanager.dbmanager.modules_models", "modulename": "threatxmanager.dbmanager.modules_models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas.Venda", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "qualname": "Venda", "kind": "class", "doc": "<p>Abstract base model for all ORM models.</p>\n\n<p>This abstract class defines common attributes for all models, such as a primary key\n(<code>id</code>), creation timestamp (<code>created_at</code>), and update timestamp (<code>updated_at</code>). It also\ndynamically sets the table name to the lowercase name of the class.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>id</strong> (int):\nPrimary key of the record, automatically incremented.</li>\n<li><strong>created_at</strong> (datetime.datetime):\nTimestamp indicating when the record was created. Defaults to the current UTC time.</li>\n<li><strong>updated_at</strong> (datetime.datetime):\nTimestamp indicating when the record was last updated. Automatically updated on modifications.</li>\n</ul>\n", "bases": "sqlalchemy.orm.decl_api._DynamicAttributesType, sqlalchemy.inspection.Inspectable[sqlalchemy.orm.mapper.Mapper[typing.Any]]"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas.Venda.__init__", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "qualname": "Venda.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas.Venda.sale_date", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "qualname": "Venda.sale_date", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas.Venda.customer", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "qualname": "Venda.customer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas.Venda.product", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "qualname": "Venda.product", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas.Venda.quantity", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "qualname": "Venda.quantity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas.Venda.unit_price", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "qualname": "Venda.unit_price", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas.Venda.id", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "qualname": "Venda.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas.Venda.created_at", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "qualname": "Venda.created_at", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.dbmanager.modules_models.vendas.Venda.updated_at", "modulename": "threatxmanager.dbmanager.modules_models.vendas", "qualname": "Venda.updated_at", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.logmanager", "modulename": "threatxmanager.logmanager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.logmanager.logmanager", "modulename": "threatxmanager.logmanager.logmanager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager", "kind": "class", "doc": "<p>Singleton class for centralized logging management.</p>\n\n<p>This class configures and manages the logging system, including Sentry integration\nfor error tracking. It retrieves logging configurations from a Config instance\nand sets up log handlers for both file and console logging.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>logger</strong> (logging.Logger):\nThe logger instance used for logging messages.</li>\n<li><strong>log_file</strong> (str):\nPath to the log file.</li>\n<li><strong>level</strong> (int):\nLogging level (e.g., logging.DEBUG, logging.INFO).</li>\n<li><strong>sentry_dsn</strong> (Optional[str]):\nSentry DSN for error tracking, if provided in the configuration.</li>\n<li><strong>_instance</strong> (Optional[LogManager]):\nThe singleton instance of LogManager.</li>\n<li><strong>_initialized</strong> (bool):\nFlag indicating whether the LogManager instance has been initialized.</li>\n</ul>\n"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.__init__", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.__init__", "kind": "function", "doc": "<p>Initializes the LogManager by setting up logging configurations and handlers.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_instance</strong> (Optional[Config], optional):\nAn instance of the configuration manager. If None, a new Config instance is used.</li>\n<li><strong>env</strong> (Optional[str], optional):\nThe environment identifier to fetch environment-specific logging configuration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_instance</span><span class=\"p\">:</span> <span class=\"n\">threatxmanager</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">manager_config</span><span class=\"o\">.</span><span class=\"n\">Config</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.log_file", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.log_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.level", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.sentry_dsn", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.sentry_dsn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.logger", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": logging.Logger"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.get_logger", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.get_logger", "kind": "function", "doc": "<p>Returns the logger instance.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>logging.Logger</strong>: The logger used for logging messages.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.debug", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.debug", "kind": "function", "doc": "<p>Logs a debug-level message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong> (str):\nThe message to log.</li>\n<li><strong>*args</strong>: Variable length argument list.</li>\n<li><strong>**kwargs</strong>: Arbitrary keyword arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.info", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.info", "kind": "function", "doc": "<p>Logs an info-level message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong> (str):\nThe message to log.</li>\n<li><strong>*args</strong>: Variable length argument list.</li>\n<li><strong>**kwargs</strong>: Arbitrary keyword arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.warning", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.warning", "kind": "function", "doc": "<p>Logs a warning-level message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong> (str):\nThe message to log.</li>\n<li><strong>*args</strong>: Variable length argument list.</li>\n<li><strong>**kwargs</strong>: Arbitrary keyword arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.error", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.error", "kind": "function", "doc": "<p>Logs an error-level message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong> (str):\nThe message to log.</li>\n<li><strong>*args</strong>: Variable length argument list.</li>\n<li><strong>**kwargs</strong>: Arbitrary keyword arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.logmanager.logmanager.LogManager.critical", "modulename": "threatxmanager.logmanager.logmanager", "qualname": "LogManager.critical", "kind": "function", "doc": "<p>Logs a critical-level message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong> (str):\nThe message to log.</li>\n<li><strong>*args</strong>: Variable length argument list.</li>\n<li><strong>**kwargs</strong>: Arbitrary keyword arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.modules", "modulename": "threatxmanager.modules", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.modules.external", "modulename": "threatxmanager.modules.external", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.modules.external.my_module", "modulename": "threatxmanager.modules.external.my_module", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.modules.external.my_module.MyModule", "modulename": "threatxmanager.modules.external.my_module", "qualname": "MyModule", "kind": "class", "doc": "<p>MyModule for Remote File Access Exploitation on Veritas Backup Exec Windows Agent.</p>\n\n<p>This module exploits a logical flaw in the Backup Exec Windows Agent to download arbitrary files\nfrom the system. The vulnerability, discovered by an anonymous researcher, affects all known versions\nof the Backup Exec Windows Agent. The output file is in MTF format, which can be extracted using\nthe NTKBUp tool listed in the references. To transfer an entire directory, specify a path ending with\na backslash.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>logger</strong> (logging.Logger):\nLogger instance inherited from BaseModule for logging messages.</li>\n<li><strong>db_manager</strong> (DBManager):\nDatabase manager instance inherited from BaseModule for database interactions.</li>\n<li><strong>config</strong> (dict):\nModule configuration dictionary loaded via BaseModule.</li>\n<li><strong>info</strong> (dict):\nModule metadata information including name, description, author, license, references, actions,\nand default action.</li>\n</ul>\n", "bases": "threatxmanager.base_module.base_module.BaseModule"}, {"fullname": "threatxmanager.modules.external.my_module.MyModule.__init__", "modulename": "threatxmanager.modules.external.my_module", "qualname": "MyModule.__init__", "kind": "function", "doc": "<p>Initialize the MyModule instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env</strong> (str, optional):\nThe environment identifier used for loading module-specific configuration.\nIf None, the default environment is used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "threatxmanager.modules.external.my_module.MyModule.run", "modulename": "threatxmanager.modules.external.my_module", "qualname": "MyModule.run", "kind": "function", "doc": "<p>Execute the functionalities of MyModule.</p>\n\n<p>This method performs the following actions:\n    1. Logs the start of module execution.\n    2. Loads the module configuration and its obfuscated version to avoid exposing sensitive data.\n    3. Logs both the obfuscated and the raw configuration.\n    4. Obtains a connection from the database engine.\n    5. Logs the successful acquisition of the database connection.\n    6. (Placeholder) Executes database operations.\n    7. Closes the database connection and logs its closure.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: Propagates any exception encountered during database operations.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "threatxmanager.modules.external.my_module_db", "modulename": "threatxmanager.modules.external.my_module_db", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "threatxmanager.modules.external.my_module_db.SalesModule", "modulename": "threatxmanager.modules.external.my_module_db", "qualname": "SalesModule", "kind": "class", "doc": "<p>Sales Module.</p>\n\n<p>This module manages sales records in the \"vendas\" table. It provides functionality to register new sales\nand retrieve inserted sales records for demonstration purposes.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>logger</strong> (logging.Logger):\nLogger instance inherited from BaseModule for logging messages.</li>\n<li><strong>db_manager</strong> (DBManager):\nDatabase manager instance inherited from BaseModule used to interact with the database.</li>\n<li><strong>config</strong> (dict):\nModule configuration loaded via BaseModule.</li>\n<li><strong>info</strong> (dict):\nDictionary containing metadata about the module, such as name, description, author, license, and available actions.</li>\n</ul>\n", "bases": "threatxmanager.base_module.base_module.BaseModule"}, {"fullname": "threatxmanager.modules.external.my_module_db.SalesModule.__init__", "modulename": "threatxmanager.modules.external.my_module_db", "qualname": "SalesModule.__init__", "kind": "function", "doc": "<p>Initialize the SalesModule.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env</strong> (str, optional):\nEnvironment identifier for loading module-specific configuration.\nIf None, the default environment from the configuration is used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "threatxmanager.modules.external.my_module_db.SalesModule.run", "modulename": "threatxmanager.modules.external.my_module_db", "qualname": "SalesModule.run", "kind": "function", "doc": "<p>Execute the SalesModule functionalities.</p>\n\n<p>This method logs the execution process, loads both raw and obfuscated module configurations,\nand interacts with the database to create and retrieve a sales record.</p>\n\n<p>The following operations are performed:\n    1. Log the start of module execution.\n    2. Load module configuration and its obfuscated version.\n    3. Create a new database session using the DBManager's engine.\n    4. Create and add a new sales record with the current UTC date.\n    5. Commit the transaction and log a success message.\n    6. Retrieve the inserted sales record and log its details.\n    7. Roll back and log an error message if an exception occurs.\n    8. Close the database session.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: Propagates any exception encountered during database operations.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();