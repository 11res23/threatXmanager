name: Publish

on:
  push:
    tags:
      - '*'

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/astral-sh/uv:0.6.5-python3.10-bookworm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history (all tags and commits)

      - name: Configure Git safe directory
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Install jq
        run: |
          apt-get update && apt-get install -y jq

      - name: Create GitHub Release using CHANGELOG block
        id: release
        run: |
          # Enable strict error handling for robustness
          set -euo pipefail

          # Extract the current tag name (e.g., v0.1.0)
          TAG=${GITHUB_REF#refs/tags/}

          # If CHANGELOG.md exists, extract the block starting with the header "## ${TAG}"
          if [ -f CHANGELOG.md ]; then
            DESCRIPTION=$(awk 'BEGIN {flag=0} {if($0 ~ "^## '"$TAG"'") {flag=1} else if(flag==1 && $0 ~ "^## ") {exit} if(flag==1) print}' CHANGELOG.md)
            # Fallback if the extracted block is empty
            if [ -z "$DESCRIPTION" ]; then
              DESCRIPTION="Automated release for ${TAG}"
            fi
          else
            DESCRIPTION="Automated release for ${TAG}"
          fi

          # Create the JSON payload using jq
          PAYLOAD=$(jq -n \
            --arg tag "$TAG" \
            --arg name "$TAG" \
            --arg body "$DESCRIPTION" \
            '{ tag_name: $tag, name: $name, body: $body, draft: false, prerelease: false }')

          # Create the release via GitHub API
          RESPONSE=$(curl -sSL \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "$PAYLOAD")

          # Extract the release ID from the response and set it as the step output
          RELEASE_ID=$(jq -r '.id // empty' <<<"$RESPONSE")
          echo "::set-output name=release_created::$RELEASE_ID"
        shell: bash

      - name: Publish Package
        if: steps.release.outputs.release_created != ''
        run: |
          uv build
          uv publish
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.UV_PUBLISH_TOKEN }}
